<?php

namespace Proxies\__CG__\App\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class CaseDraft extends \App\Entity\CaseDraft implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = ['pet_name' => NULL, 'res_name' => NULL, 'case_type' => NULL, 'case_type_name' => NULL, 'filing_date' => NULL, 'draft_id' => NULL, 'draft_status' => NULL, 'case_file' => NULL];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {
        unset($this->pet_name, $this->res_name, $this->case_type, $this->case_type_name, $this->filing_date, $this->draft_id, $this->draft_status, $this->case_file);

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }

    /**
     * 
     * @param string $name
     */
    public function __get($name)
    {
        if (array_key_exists($name, $this->__getLazyProperties())) {
            $this->__initializer__ && $this->__initializer__->__invoke($this, '__get', [$name]);

            return $this->$name;
        }

        trigger_error(sprintf('Undefined property: %s::$%s', __CLASS__, $name), E_USER_NOTICE);
    }

    /**
     * 
     * @param string $name
     * @param mixed  $value
     */
    public function __set($name, $value)
    {
        if (array_key_exists($name, $this->__getLazyProperties())) {
            $this->__initializer__ && $this->__initializer__->__invoke($this, '__set', [$name, $value]);

            $this->$name = $value;

            return;
        }

        $this->$name = $value;
    }

    /**
     * 
     * @param  string $name
     * @return boolean
     */
    public function __isset($name)
    {
        if (array_key_exists($name, $this->__getLazyProperties())) {
            $this->__initializer__ && $this->__initializer__->__invoke($this, '__isset', [$name]);

            return isset($this->$name);
        }

        return false;
    }

    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'id', 'pet_name', 'res_name', 'case_type', 'case_type_name', 'filing_date', 'draft_id', 'draft_status', 'case_file'];
        }

        return ['__isInitialized__', 'id'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (CaseDraft $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

            unset($this->pet_name, $this->res_name, $this->case_type, $this->case_type_name, $this->filing_date, $this->draft_id, $this->draft_status, $this->case_file);
        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getpetName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getpetName', []);

        return parent::getpetName();
    }

    /**
     * {@inheritDoc}
     */
    public function setpetName($pet_name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setpetName', [$pet_name]);

        return parent::setpetName($pet_name);
    }

    /**
     * {@inheritDoc}
     */
    public function getresName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getresName', []);

        return parent::getresName();
    }

    /**
     * {@inheritDoc}
     */
    public function setresName($res_name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setresName', [$res_name]);

        return parent::setresName($res_name);
    }

    /**
     * {@inheritDoc}
     */
    public function getcaseType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getcaseType', []);

        return parent::getcaseType();
    }

    /**
     * {@inheritDoc}
     */
    public function setcaseType($case_type)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setcaseType', [$case_type]);

        return parent::setcaseType($case_type);
    }

    /**
     * {@inheritDoc}
     */
    public function getcaseTypeName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getcaseTypeName', []);

        return parent::getcaseTypeName();
    }

    /**
     * {@inheritDoc}
     */
    public function setcase_Type_Name($case_type_name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setcase_Type_Name', [$case_type_name]);

        return parent::setcase_Type_Name($case_type_name);
    }

    /**
     * {@inheritDoc}
     */
    public function getfilingDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getfilingDate', []);

        return parent::getfilingDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setfilingDate($filing_date)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setfilingDate', [$filing_date]);

        return parent::setfilingDate($filing_date);
    }

    /**
     * {@inheritDoc}
     */
    public function getdraftId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getdraftId', []);

        return parent::getdraftId();
    }

    /**
     * {@inheritDoc}
     */
    public function setdraftId($draft_id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setdraftId', [$draft_id]);

        return parent::setdraftId($draft_id);
    }

    /**
     * {@inheritDoc}
     */
    public function getdraftStatus()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getdraftStatus', []);

        return parent::getdraftStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function setdraftStatus($draft_status)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setdraftStatus', [$draft_status]);

        return parent::setdraftStatus($draft_status);
    }

    /**
     * {@inheritDoc}
     */
    public function getcaseFile()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getcaseFile', []);

        return parent::getcaseFile();
    }

    /**
     * {@inheritDoc}
     */
    public function setcaseFile($case_file)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setcaseFile', [$case_file]);

        return parent::setcaseFile($case_file);
    }

}
